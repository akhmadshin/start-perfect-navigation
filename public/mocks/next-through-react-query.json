{
  "id": 3,
  "attributes": {
    "title": "Running Next.js navigation through react-query",
    "description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "In next.js pages router, every client navigation to routes with getServerSideProps/getStaticProps triggers a fetch request. What if we could run those client-side fetch requests through a client-side fetch library like "
          },
          {
            "type": "text",
            "text": "react-query",
            "code": true
          },
          {
            "type": "text",
            "text": "? I've created a "
          },
          {
            "type": "text",
            "text": "next-query-glue",
            "code": true
          },
          {
            "type": "text",
            "text": " library that allows you to do it. It brings a lot of control over data requests and greatly improves the user experience."
          }
        ]
      }
    ],
    "slug": "next-through-react-query",
    "sections": [
      {
        "id": 15,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "heading",
            "children": [
              {
                "type": "text",
                "text": "Next.js pages router default behavior"
              }
            ],
            "level": 2
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Nextjs pages router is pretty simple. It ensures that route data is fresh for every navigation. As a result, users have to wait for the getServerSideProps/getStaticProps response on every navigation. Navigation in Nextjs and most other metaframeworks is a blocking operation. Below is a simple demo website that imitates the behavior of the NextJS pages router. Navigate between pages to see how it works."
              }
            ]
          }
        ]
      },
      {
        "id": 3,
        "__component": "sections.fake-app",
        "isOptimistic": false,
        "withJsChunkPrefetch": true,
        "withPlaceholderData": false
      },
      {
        "id": 21,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Nextjs pages router have some drawbacks:"
              }
            ]
          },
          {
            "type": "list",
            "format": "unordered",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "No cache layer."
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Route data can become stale, while staying on the same page."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "id": 11,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "heading",
            "children": [
              {
                "type": "text",
                "text": "Fetching route data through react-query"
              }
            ],
            "level": 2
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "With react-query and next-query-glue, we get a stream of route data that updates constantly and automatically. In that article, I'll shortly describe some important properties of react-query. I highly recommend reading the "
              },
              {
                "type": "link",
                "url": "https://tanstack.com/query/latest/docs/framework/react/overview",
                "children": [
                  {
                    "type": "text",
                    "text": "react-query documentation"
                  }
                ]
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          },
          {
            "type": "list",
            "format": "unordered",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "staleTime: a time in milliseconds that a data should be considered fresh when attempting to load. Default value is 0, recommended 1 minute or more for fetching route data."
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "gcTime: a time in milliseconds after which, if a query is not called, data should be deleted from the cache. Default value is 5 minutes, recommended 5 minutes or more for fetching route data."
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Those properties reveal how automatic invalidation works in react-query. It's not recommended to change them."
              }
            ]
          },
          {
            "type": "list",
            "format": "unordered",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "refetchOnWindowFocus (by default is true) -  revalidates query data whenever the user makes tab or window of your website active."
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "refetchOnReconnect (by default is true) - revalidates query data once user regained a network connection."
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "refetchOnMount (by default is true) - revalidates query data once component calling useQuery is mounted."
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Revalidation also can be triggered programmatically, through a "
              },
              {
                "type": "link",
                "url": "https://tanstack.com/query/latest/docs/framework/react/guides/query-invalidation",
                "children": [
                  {
                    "type": "text",
                    "text": "simple API"
                  }
                ]
              },
              {
                "type": "text",
                "text": "."
              }
            ]
          }
        ]
      },
      {
        "id": 12,
        "__component": "sections.code",
        "content": "// Route data is now accessed through the useQuery hook. No more props drilling.\nconst { data: props, isLoading, isFetching } =  useQuery({\n  queryKey,\n  queryFn,\n  staleTime: Infinity,\n  gcTime: Infinity,\n});",
        "description": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Application below runs useQuery hook with next arguments:"
              }
            ]
          }
        ]
      },
      {
        "id": 1,
        "__component": "sections.fake-app",
        "isOptimistic": true,
        "withJsChunkPrefetch": true,
        "withPlaceholderData": false
      },
      {
        "id": 18,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Thanks to next-query-glue, navigation now is a non-blocking operation. The page view updates instantly. While isLoading flag from useQuery is equal to true, the page's skeleton layout appears. The effect is similar to loading.jsx file from the app router, but with react-query, you manage the loading state at the component level, while the app router handles it at the route view level."
              }
            ]
          }
        ]
      },
      {
        "id": 17,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "heading",
            "children": [
              {
                "type": "text",
                "text": "Optimistic navigation via placeholderData prop"
              }
            ],
            "level": 2
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Here's a quote from "
              },
              {
                "type": "link",
                "url": "https://tanstack.com/query/latest/docs/framework/react/guides/placeholder-query-data",
                "children": [
                  {
                    "type": "text",
                    "text": "react-query documentation about placeholderData property"
                  }
                ]
              },
              {
                "text": "",
                "type": "text"
              }
            ]
          },
          {
            "type": "quote",
            "children": [
              {
                "type": "text",
                "text": "Example: An individual blog post query could pull \"preview\" data from a parent list of blog posts that only include title and a small snippet of the post body. You would not want to persist this partial data to the query result of the individual query, but it is useful for showing the content layout as quickly as possible while the actual query finishes to fetch the entire object."
              }
            ]
          },
          {
            "type": "paragraph",
            "children": [
              {
                "text": "",
                "type": "text"
              },
              {
                "type": "link",
                "url": "https://akhmadshin.dev/blog/3-ways-to-achieve-instant-navigation/#optimistic_navigation",
                "children": [
                  {
                    "type": "text",
                    "text": "Optimistic navigation"
                  }
                ]
              },
              {
                "type": "text",
                "text": " is a good alternative to "
              },
              {
                "type": "link",
                "url": "https://akhmadshin.dev/blog/3-ways-to-achieve-instant-navigation/#prefetch",
                "children": [
                  {
                    "type": "text",
                    "text": "prefetching"
                  }
                ]
              },
              {
                "type": "text",
                "text": ". When the \"Lorem ipsum\" article is opening for the first time, it feels that it opens instantly because of optimistic UI. "
              }
            ]
          }
        ]
      },
      {
        "id": 14,
        "__component": "sections.code",
        "content": "const { data: props, isLoading, isFetching } =  useQuery({\n  queryKey,\n  queryFn,\n  staleTime: Infinity,\n  gcTime: Infinity,\n  placeholderData: {\n    \"title\": \"Lorem ipsum\",\n    \"description\": \"Lorem ipsum dolor sit ...\",\n    \"slug\": \"lorem-ipsum\",\n    \"thumbnail\": \"/assets/image.jpg\"\n  },\n});",
        "description": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "When the article card is opened, useQuery hook runs with next arguments:"
              }
            ]
          }
        ]
      },
      {
        "id": 5,
        "__component": "sections.fake-app",
        "isOptimistic": true,
        "withJsChunkPrefetch": true,
        "withPlaceholderData": true
      },
      {
        "id": 13,
        "__component": "sections.code",
        "content": "// getServerSideProps response: \n[\n  {\n    \"title\": \"Lorem ipsum\",\n    \"description\": \"Lorem ipsum dolor sit ...\",\n    \"slug\": \"lorem-ipsum\",\n    \"thumbnail\": \"/assets/image.jpg\"\n  }\n]",
        "description": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "During the initial load, the router fetches an array of articles."
              }
            ]
          }
        ]
      },
      {
        "id": 20,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Every article object have a title, description, and thumbnail. We use that data to display a list of article cards, and we pass it as a placeholderData property in the useQuery hook. This explains why when the article is opened for the first time, its content displays a skeleton instead of actual data. The second and subsequent openings will utilize data from the cache."
              }
            ]
          }
        ]
      },
      {
        "id": 22,
        "__component": "sections.rich-text",
        "content": [
          {
            "type": "heading",
            "children": [
              {
                "type": "text",
                "text": "Summary"
              }
            ],
            "level": 2
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "React-query brings a lot of new client centric features to the router."
              }
            ]
          },
          {
            "type": "list",
            "format": "unordered",
            "children": [
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Client side SWR  caching layer"
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Optimistic navigation (via optimistic UI)"
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Automatic and custom query invalidation"
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Query prefetching"
                  }
                ]
              },
              {
                "type": "list-item",
                "children": [
                  {
                    "type": "text",
                    "text": "Persistent Storage"
                  }
                ]
              }
            ]
          },
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "text": "Such a tight connection with react-query in next.js is possible via the `next-query-glue` library."
              }
            ]
          }
        ]
      }
    ],
    "thumbnail": {
      "data": {
        "id": 9,
        "attributes": {
          "thumbhash": "ZQgGBIDQfXV2iHedVXm9UCRPpg==",
          "url": "/uploads/mick_haupt_t_Jefy_Vu7_Po_unsplash_85d5975b3b.jpg",
          "alternativeText": null,
          "height": 1080,
          "width": 1920
        }
      }
    },
    "seo": {
      "id": 2,
      "metaTitle": "Bringing react-query features into Next.js pages router",
      "metaDescription": "With the next query-glue library, nextJS pages-router receives all react-query features, such as caching, automatic/custom revalidation, and optimistic navigation."
    }
  }
}